week3(자바의 기본 문법)
- 객체 지향언어: 클래스 기반 객체 지향 언어로 해야함

- 로컬 변수의 선언과 이용
    > 프리미티브 타입: byte short int long float double char boolean
        >> 램의 어떤 주소에 값이 직접 들어가는 변수 타입
    > String + 그 밖의 타입들***
        >> 래퍼런스(참조) 타입
        >> 데이터의 값이 있는 장소를 가리킴
        >> 위의 프리미티브 타입을 제외하고는 다 래퍼런스 타입임

- 식별자 명명 규칙(구분되는 변수나 함수의 이름)
    >> 하나 이상의 글자로
    >> 첫 번째 글자는 문자이거나 '$', '-'여야 함
    >> 두 번째 이후 글자는 숫자, 문자, '$', '_'여야함
    >> 위의 특수 문자 말고는 사용 불가
    >> 길이 제한 없음
    >> 키워드는 식별자로 사용 불가
    >> true false null 식별자 사용 불가

    >> 클래스는 대문자로, 함수/변수는 소문자로, 단어 2개면 뒤에 것 대문자로(helloWorld = "hello world")(자바 스타일)

- 변수 사용법
    class DecExample2 { //클래스 이름 대문자로
        public static void main(String args[]){
            int num;
            System.out.println(num);    // 오류: num 초기화 안되어 있음.
        }
    }

    class DecExample3 { //클래스 이름 대문자로
        public static void main(String args[]){
            short num1 = 12; (-2^15 ~ +2^15)
            System.out.println(num1);
            dobule num2 =12.75;
            System.out.println(num2);
            char ch = 'A'; // 내부적으로는 정수형이지만, 출력은 숫자로
            System.out.println(ch);
        }
    }

- 로컬 변수 사용 범위
    class DecExample4 { //클래스 이름 대문자로
        public static void main(String args[]){
            {
                int num = 10; //이 블록 안에서만 선언됨
            }
            System.out.println(num) //오류: num이 없음
        }
    }

- final 변수: 값을 딱 한번만 대입 가능
    class FinalExample1 {
        public static void main(String args[]){
            final double pi;
            pi = 3.14;  //final 변수 초기화, 이후 다른 값 대입 못함.
            dobule  radius = 2.0, circum;
            circum = 2 * pi * radius;
            System.out.println(circum);
        }
    }

- 단순 대입문
    > 변수 = 식;    //변수의 이름에 변수에 대입할 값을 계산하는 식의 결과를 넣음
    > 예) num = 1; num2 = 2 + 3;(5) 등
    > + - * / %(나머지)

- 여러가지 대입문
    > 복합 대입 연산자: += -= *= /= %=
    > 증감 연산자: ++ -- (후위: (변수)++ or (변수)-- 먼저 사용하고 증감)

+ 자바 데이터/입출력
- 데이터 변환
    > 정보를 잃어버릴 수 있기 때문에 조심스럽게 다뤄야함
    > 세 가지 방법
        >> 강제 변환: 가장 강력하나 위험한 방법
            average = (float) total/count; // 정수형 total을 실수형으로 변환
            >> 확장 변환과 축소 변환 모두 가능

- 문자열 상수
(연산자 중복: 연산자를 재설정 정한 것(ex. 2+1==3, "Hi" + "there"=="Hithere)
    > String 클래스의 한 객체
    > 쌍 따옴표 안의 문자들의 나열
    > + 연산자가 두 개의 문자열 상수들을 결함하기 위해 사용됨.
    > 문자열상수와 숫자를 결합하기 위해 사용될 수 있다.

- 출력문 사용
    > System.out.println(<내용>);
    > System.out.println(); //빈 줄 출력
    > 문자열 결합
        >> + 연산자의 피연산자들이 문자열과 숫자인 경우 숫자가 문자열로 바뀐 후 결합된다.
            (System.out.println("나의 나이: " + 20); >> 출력: 나의 나이: 20)
        >> 다음 출력문들의 출력 결과는?
            System.out.println("3과 4를 결합: " + 3 +4);    >> 출력: 3과 4를 결합: 34;
            Systme.out.println("3과 4를 더함: " + (3+4));   >> 출력: 3과 4를 더함: 7;
                >> (3+4)를 한 후 문자열로 변환 함

- 입력문 사용하기
    > Scanner 클래스가 여러 데이터 유형들의 입력 값들을 읽기 위한 편리한 메소드들을 제공한다.
    > Scanner 객체가 여러 입력 장치들로부터 입력 값들을 읽어 드리기 위해서 만들어 질 수 있다. 이 값들은 사용자가 키보드를 통해 입력하는 값들을 포함한다.
    > 키보드 입력은 System.in 객체에 의해 나타내진다.
    > Scanner scan = new Scanner(System.in);
        >> new 연산자가 Scanner 객체를 생성(new => 객체 생성 키워드)
        >> System.in 대신에 문자열이 들어오면 그 파일을 읽어옴
    > answer = scan.nextLine(); //현재 줄에 남아있는 모든 입력을 한 문자열로 읽기 
        >> 이외에도 nextInt nextDouble 등도 있음.
    > Scanner 클래스는 java.util 클래스에 있음

- 입력 토큰들
    > 백색 공간으로 토큰(입력)을 분리 해 사용
    > 백색 공간은 빈칸(space) 탭(tap) 새줄 문자(아마도... \n?) 포함

- 조건문
    > if 조건문
        > if(조건식)
            명령문
        > if(조건식){
            블록
        }
        > 조건식이 참이면 명령문/블록 실행

        > if(조건식){
        }
          else{
        }
        >> 들여쓰기!! 중요!!

        > 다중 if문
        >> if() { if() {} }
        
        > dangling else: 어느 if 키워드와 짝을 이루는지 모호한 else 키워드
        if(num1>num2)
            if(num1>num3)
                num = num1;
          else
            num = num3;
        >> 구간을 잘 나눠야함

    > switch 조건문
        switch(식) {
            case 값1: (명령문) break;
            case 값2: (명령문) break;           //break문이 없으면 밑에 있는 명령문도 실행함.
            case 값3: (명령문) break;
            default: (명령문) break;            //모든 case 중 일치하는 것이 없다면 실행
        }

- 반복문
    > while 반복문
        while (조건식){
            명령문
        }
        whlie (true){   //무한 루프 ctrl + c로 나올 수 있음
            명령문
        }
    > do-while: 한번 실행 보장
        do{
            명령문
        } while (조건식);        //꼭 마지막에 ;!!
    > for
        for(초기화식;조건식;업데이트식){
            실행부분
        }
        for(;;){        //무한 루프 ctrl = c로 나올 수 있음
            명령문
        }

        > 향상된 for문 형식
        for(변수타입 변수이름 : 배열이름)
        >> for(int num : arr){
            System.out.println(num);    //arr 배열 값을 차례로 num에 대입, 출력
        }
    > break: 만나면 해당 반복문을 빠져나감
        > 중첩된 반복문을 나가고 싶으면 라벨 사용
        Loop:
            for(int i = 0;i<10;i++){
                 for(int j= 0;j<10;j++){
                    break Loop;         //루프를 빠져나감
             }
            }
    > continue: 만나면 반복문의 다음 차례로 넘어감(continue 뒷쪽의 명령문 실행 x)
        while(cnt<10){
            if(cnt == 5) continue;      //밑의 cnt++이 실행이 되지 않아 무한 루프가 나옴
            System.out.println(cnt);
            cnt++;
        }
        > 위의 라벨 사용도 break처럼 사용가능(but 추천 X)

- 메소드 호출문
    > 여러 개의 메소드가 포함된 크래스
    class Luxury{           // 클래스
        public static void main(String args[]){             // 메소드 하나
            printCharacter('*', 30);
            System.out.println("hi");
            printCharacter('*', 30);    //메소드 호출문, printCharacter메소드 출력
        }

        static void(반환형태: void-안줌) printCharacter(char ch, int num ){       // 메소드 둘/호출 되는 메소드
            for(int i = 0;i<num;i++){
                System.out.print(ch);
            }
            System.out.println();
        }
    }
    > main만 자동으로 실행, 이외는 자동 실행X
    > 파라미터
        > printCharacter(char ch, int num)      // 파라미터: 어떤 파라미터를 받아올 지 생각해봐야 함, 타입과 순서가 다르면 오류가 남
        > 파라미터는 없을 수도, 하나 이상 사용할 수도 있음  
        > c와 다른점: 무조건 참조에 의한 반환함.
    > 리턴 값
        > 변수 = 함수명(파라미터); 
        > 변수와 함수의 리터값의 자료형이 같아야함. + 함수에는 return 있어야함.

week4
- 메소드(3주차 리뷰)
    > 이름: 무엇을 하는 함수인지 알려줄 수 있는 이름 정하기(어떤 기능으로 만들건지 확실히 결정을 하고 만들어야함)
    > 파라미터: 그 기능을 위해 필요한 것을 가져오기
    > 명령: 코딩
    > 결과: 결과 반환이 필요하면 return을 통해 전달 그렇지 않으면 안해도 괜찮(함수명 옆, 반환형)
    > ex. static void printCharacter(char ch, int num)
        > 이름: printCharacter 문자를 출력하는 메소드
        > char ch, int num: 기능에 필요한 제료
        > void: 반환형(void는 반환 안함)

<week4 본 수업>
- 배열(Array)의 선언, 생성, 이용
    > 배열의 필요성: 타입이 같은 데이터는 하나로 모아 이용/접근하기 편함(같은 타입!!! 중요!!)
    > 인덱스: 배열의 각 요소의 주소 0에서 시작
    > 배열명: 배열의 주소, 시작 번지가 그려저 있음
    > 배열의 선언: 타입 식별자[]/타입[] 식별자 식으로
        > ex. int arr[];
        > ex. int[] arr;
        >> 둘 다 가능/이건 arr이라는 변수만 선언되어있음, new가 없기 때문에 정의는 되어있지 않음. 인트 배열을 가리키는 arr 만들어 둠
    > 배열의 선언: 선언 뿐만 아니라 생성을 해야만(new 키워드 사용해야함) 사용할 수 있음. 
    배열명 = new 타입[크기]
        > ex. arr = new int[10] 
        >> int값 10개가 들어갈 수 있는 배열 생성, arr이 그걸 가리킬 수 있도록 지정함. (배열명 arr은 배열의 시작 주소를 갖고 있음)
    
    >> int arr[];           배열 변수 선언
    >> arr = new int[10];   배열 생성
    >>(ppt 참고)
    > 배열은 레퍼런스 타입
    > 2차원 배열도 동일

    > 효율적인 코딩 방법
        > ex. arr[0] = 1; arr[1] = 2; ... 이걸
            int arr[] = new int[10]; arr[0] ... 이렇게도
            int arr[] = {1, 2, ....}; 이렇게도 가능
        > ex. int arr[] = { 1, 2, 3, 4, 5};
            >> 1, 2, 3, 4, 5가 들어가 있는 배열을 배열을 가리키는 변수 arr가 가리키고 있는 형태

    > 배열의 함수
        > <배열이름>.length: 배열의 크기 (배열의 length 변수)

- 메소드 호출문
    > main 메소드의 파라미터
        > ex. public static void main(String args[])
         >> 해당 프로그램에서 받아오는 대상을 받는 것이 args
         >> java 파일명 _ _ _ >> 뒤에 들어오는 값을 args[0], args[1] ... 으로 받아옴
         >> 공백으로 나눠지기 때문에 공백을 포함해서 하나로 묶고 싶을 때는 "" 사용
        > ParamExample1.java add.java 참고

- 익셉션 처리에 사용되는 try 문
    > 익셉션(exception, 예외) : 자바에서 에러를 지칭하는 용어
        > ex. int를 받아와야하는데 char형을 받아온 경우: 프로그램이 stop됨.
    > 원래는 개발자가 하나하나 if문으로 해결해야했지만, 번거로워서 클래스를 만들어놨음. 그것이 exception

    > try문: 익셉션 처리에 사용되는 명령문
        > 기본 형식:
            try
                (try 블록)
            catch(익셉션타입 익셉션변수)    // catch 문은 반복 가능
                (catch 블록)
            finally             //위의 catch을 다 통과하면 마지막에 실행, 생략가능
                (finally 블록)
        > parseInt(String s) >> throws NumberFormatException이 발생 가능 (숫자 대신 문자가 들어갈 수도 있음)
            >>이런식으로 문제가 있을 수 있으니 throws가 있는지 확인해야함

        > ex.
         try{
             result = a/b;
             System.out.println(result);
         }
         catch(java.lang.ArithmeticException e){
             System.out.println("잘못된 연산입니다.");
             //다시 try로 돌아갈 수 있음
         }
         catch(java.lang.ArrayIndexOutOfBoundsException e) {        0으로 나눌때 나오는 에러. catch는 여러번 사용가능
             System.out.println("잘못된 인덱스입니다.");
         }
         finall{        //생략가능
             System.out.println("Done.");
         }

<3장: 프리미티브 타입>
- 자바의 타입 분류 체계
    > 자바 프로그램의 모든 변수와 데이터에는 타입이 있음(상수도 있음/계산의 중간 결과에도 내부적으로 타입이 부여됨(ppt 3장 참고))
    > 각 타입마다 데이터를 집어넣고 빼내는 방법이 다 다르기 때문에(ex. int는 맨 앞의 bit가 음수 양수 의미 등)

    > 자바 데이터 타입
        > 프리미티브 타입: 주소에 직접 값이 들어가는 것
            > 수치 타입:
                > 정수 타입 - byte int shot
                > 부동소수점 타입 - float double
            > 불리언(boolean) 타입 - boolena
        > 레퍼런스 타입: 프리미티브 제외하고 모두
            > 클래스 타입(String Integer 등 앞글자가 대문자인 것 대부분)
            > 인터페이스 타입
            > 배열 타입(array, new사용)
            > 열거 타입
    
        > 부동소수점 표기
            > ex. 0.012375 X 10^3
               0.12374 X 10^2
                ... 이런식
            > float보다 double 이 더 정밀도(정확도)가 높음
        > 불리언 타입:
            > ex. boolean truth; truth = num >10; 이런식으로 사용 가능(c에서는 없는 표현)
    
    > 데이터의 내부표현
        > 데이터 표현 방식의 차이 - 소스코드의 상수/입력 데이터는 사람이 읽기 적합한 형태
        - 컴파일 후 데이터 : 컴퓨터가 읽기 적합한 형태
        >데이터 표현 방식

    > 부동소수점수의 내부 표현
        > 앞 1비트 부호
        > 그 다음 11비트 지수: 10^3이런것
        > 그 다음 52비트 기수: 소수점 이하 수
        > MIN_VALUE/MAX_VALUE : 각 형태의 최대 최소값 출력

    > 문자의 내부 표현: Unicode 원래 ASCII코드 사용 8비트에서 16비트로 늘어남(unicode.org/charts/ 참고. hangule Sullable 들어가보면 한글 모든 글자 표현한 차드 나옴)
        > ppt 참고

- 리터럴의 표기 방법
    > 리터럴: 소스코드 내에 데이터 값 그대로 쓴 상수(int num = 1<<여기 1이 리터럴);
    > 정수 리터럴의 표기 방법
        > 0으로 시작: 8진수
        > 0x로 시작: 16진수
        > 그냥 아라비아 숫자: 정수(10진수)
        > L/l로 끝남: long 타입 리터럴(안 붙이면 짤려서 들어갈 수 있음)
    > 부동소숫점 리터럴의 표기법
        >.이 있으면 일단 double로 생각.
        > e뒤에 뭐가 있으면 그건 10의 진수임.
            >ex. 0xA1.27p5
        > 뒤에 f/F를 붙이면 float형 리터럴(소숫점이 없어도 float형으로 생각)
    > 문자리터럴 표기법
        > ''로 이루어진 한 글자
        > '\n' '\b' '\t' 등등도 문자
        > '\u<코드번호>': unicode로 표현 가능(코드번호는 16진수로)
    > 문자열 리터럴 표기법 
        > ""로 이루어진 어떤 문자열
        > ""도 문자열임. 
            > ex. String str = "Hello, Java"(or "")
                > "Hello, Java"(or "")가 있는 문자열 공간을 str이 가리킴
        > "을 문자열 내에 표현하고 싶으면 \" 사용
        > +은 연산자 중복으로 두 문자열을 붙임.
    > 불리언 리터럴 표기법
        > true나 false값이 나옴. 프린트 해도 true false나옴.

##################
<week5: 연산자>

#4장
- 용어 설명//알아두기
    > 연산(operation): 규칙에 따라 데이터 처리, 결과 산출
    > 연산자(operator): 연산에 표시나 기호
    > 피연산자(operand): 연산되는 데이터
    > 식(expression): 연산자/피연산자를 이용하여 연산 과정을 기술한 것

- 데이터 타입과 연산자가
    > ALU: 산술/논리적 연산을 하는 것. 항상 타입에 따라 연산. 같은 타입만 연산함. 타입이 다른 것은 연산할 수 없음. 그래서 그런 경우에는 범위/정밀도가 높은 쪽으로 타입을 변경함. (int double 일 경우 double로)
    > 타입 범위:
        double > float > long > int > short, char > byte 순
    > 작은 쪽으로 바뀌는 경우: 강제 형변환으로 변환 (type)(값), 데이터 손실이 있을 수 있음(손실있으면 니가 책임져라)

- 자바의 연산자들
    > C와 같음(100%)
    > int int 연산시 값도 int로 나오기 때문에 double형을 요할 경우 int double로 연산해야 함. (7/2 == 3, 7/2.0 == 3.5)
    > 다른 타입의 변수를 연산할 때는 더 넓은 범위의 데이터 타입으로 자동 변환 되어 연산 됨.(위 타입 범위 참고) byte 연산 시 int로 저장 됨. short도 int로 저장 됨. 그래서 byte 연산을 byte에 저장하려하면 오류남.
    > 변수 앞에 붙은 +,-는 부호 연산자. 
    > 문자열 연결 시 문자열로 변경 후 뒤에 붙임.
    > 단순 대입 연산자는 오른쪽 값/식을 왼쪽으로 대입함. 대신 오른쪽 값/식이 왼쪽보다 타입 범위가 넓을 경우 사용 할 수 없음. 
    > 수치 비교 연산자는 true나 false(boolean) 타입으로 저장 됨. 동등 연산자도 마찬가지(==, !=).
    > 논리 연산자: & | ^(하나가 true, 하나가 false면 true 아니면 false) !
    > 조건 연산자: <조건식> ? 식1(true) : 식2(false)
    > 피연산자가 int보다 좁은 타입이면 int 타입으로 자동 변환 수행
    > 쉬프트 연산자: 데이터 구성 비트를 오른쪽/왼쪽으로 밀어서 이동시키는 연산자.(빈공간은0으로 체움)
    > 캐스트연산자: 타입의 변환을 수행하는 연산자(개발자가 보증해라)(boolean은 불가)

- 연산자 우선 순위: 왼쪽에서 오른쪽으로

#5장: 객체와 클래스
- 프로그래밍 기술의 변천
    > 기계어와 어셈블리어: 모든 코드를 2진수로 표현, 이걸 기계어를 사용하자! 이걸 2진수로 바꾸는 것이 어셈블리어. cpu의 구조를 알아야만 프로그래밍 할 수 있었음. 기계위주였음
    > 일상 언어를 닮은 고급 프로그래밍 언어 등장: 각 기계의 구조에 맞춤으로 변환해주는 컴파일러 등장. 사람위주. 기계위에 사람이 있다는 의미로 high level 프로그래밍 언어. 각 장단점이 있는 언어 cobol, c 등등 등장. 여기서 자주 쓰는 코드가 있다는 것을 알게 됨. 이걸 하나로 만들어 두고 필요할 때 갖다가 쓰자!! >> 구조적 프로그래밍 기법 등장
    > 구조적 프로그래밍 기법의 등장: but 하나를 고치면 다른 것도 다 고처야해... 귀찮... 재사용하기 용의 하게 할 수 없나? 객체 지향적으로 하자!
    > 새로운 프로그래밍 기법의 필요성: 객체 지향적 프로그래밍. 객체를 위주로 사용하자. 객체를 만들고 프로그래밍하자.
- 객체를 어떻게 표현?
    > 특성으로 묘사되고 행동으로 상호작용하는 현실세계의 객체들
        > ex. 사람 >> 이름/키/체중/재산/나이 등등... (객체의 특성을 설명하는 데이터)| 먹는다/말한다/걷는다/달랜다 등등... (객체의 행위를 설명하는 함수)
        > 예금 계좌: 계좌번호/예금주 이름/잔액 | 예금한다/인출한다
        > 현실에서는 이보다 더 많은 것들이 있기 때문에 이 중 필요한 것을 추출하는 것이 중요
        > 객체에 대한 데이터와 기능에 따라 객체 구조

        > 클래스: 같은 종류 객체들의 공통된 데이터 구조와 기능을 정의(객체의 특성을 정의)
            > 특징: 멤버 변수       기능: 멤버 함수
            > 클래스를 기반으로 객체를 생성(붕어빵 틀과 붕어빵)
            > 객체를 만들기 위한 틀
        
        > class <클래스 명>{
            <맴버 변수 정의>
            <맴버 함수 정의>
        }
        > ex.
        class Account{      //클래스 이름은 대문자로
            String accountNo;
            String ownerName;
            int balance;
            //함수를 만드는 것이 중요 
            void deposit(int amount){
                balance+=amount;
            }
            int withdraw(int amout){
                if(balance < amount) return 0;
                balance -= amount;
                return amount;
            }
        }

